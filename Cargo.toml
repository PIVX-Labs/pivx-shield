[package]
name = "pivx-shielding"
version = "0.1.0"
authors = ["Duddino <duddino@duddino.com>", "Alessandro Rezzi <alessandrorezzi2000@gmail.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]
multicore = ["pivx_proofs/multicore", "wasm-bindgen-rayon"]

[dependencies]
lazy_static = "1.4.0"
async_once = "0.2.6"
sha256 = "1.1.2"
getrandom = { version = "0.2", features = ["js"] }
reqwest = { version = "0.11.14", features = ["blocking"] }
wasm-bindgen = "0.2.74"
wasm-bindgen-futures = "0.4.34"
pivx_client_backend = { git = "https://github.com/Duddino/librustpivx" }
pivx_primitives = { git = "https://github.com/Duddino/librustpivx", default-features = false, features = ["transparent-inputs" ] }
pivx_proofs = { git = "https://github.com/Duddino/librustpivx" }
serde = { version = "1.0", features = ["derive"] }
serde-wasm-bindgen = "0.4.5"
serde_json = "1.0.93"
jubjub = "0.9"
hex = "0.4.3"
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

secp256k1 = "0.21"
either = "1.8.1"
wasm-bindgen-rayon = { version = "1.0.3", optional = true }

[dev-dependencies]
tokio = { version = "1.26.0", features = ["full"] } 
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = 3
lto = true

[package.metadata.wasm-pack.profile.release]
wasm-opt = true

